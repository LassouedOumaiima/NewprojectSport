package fr.ca.cats.p1354.s3601.svcllm.controller;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import fr.ca.cats.p1354.s3601.svcllm.model.Chat;
import fr.ca.cats.p1354.s3601.svcllm.model.DemandeSuggestionEmails;
import fr.ca.cats.p1354.s3601.svcllm.service.ConsumerKafkaService;
import fr.ca.cats.p1354.s3601.svcllm.service.LLMAccessService;
import fr.ca.cats.p1354.s3601.svcllm.service.SvcllmService;
import fr.ca.cats.p1354.s3601.svcllm.service.impl.ConsumerKafkaServiceImpl;
import fr.ca.cats.p1354.s3601.svcllm.service.ProducerKafkaService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

class SvcllmControllerTest {

    @Mock
    private ConsumerKafkaServiceImpl consumer;

    @Mock
    private ProducerKafkaService producer;

    @Mock
    private LLMAccessService llmAccessService;

    @Mock
    private ConsumerKafkaService consumerKafkaService;

    @Mock
    private SvcllmService svcllmService;

    @InjectMocks
    private SvcllmController controller;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testStart() {
        ResponseEntity<String> expectedResponse = ResponseEntity.ok("Success");
        when(consumerKafkaService.start(consumer)).thenReturn(expectedResponse);

        ResponseEntity<String> response = controller.start();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(consumerKafkaService).start(consumer);
    }

    @Test
    void testStartException() {
        when(consumerKafkaService.start(consumer)).thenThrow(new RuntimeException("Service error"));

        ResponseEntity<String> response = controller.start();

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody().contains("KO"));
    }

    @Test
    void testStop() {
        when(consumer.getIsActiveLocal()).thenReturn(false);

        String response = controller.stop();

        assertTrue(response.contains("isActive= false"));
        verify(consumer).scheduleStopLocal();
    }

    @Test
    void testStopException() {
        doThrow(new RuntimeException("Stop error")).when(consumer).scheduleStopLocal();

        String response = controller.stop();

        assertTrue(response.contains("Exception"));
    }

    @Test
    void testPromptBuilder() {
        DemandeSuggestionEmails prompt = new DemandeSuggestionEmails();
        Chat expectedChat = new Chat();
        when(svcllmService.promptBuilder(prompt)).thenReturn(expectedChat);

        Chat response = controller.promptBuilder(prompt);

        assertEquals(expectedChat, response);
        verify(svcllmService).promptBuilder(prompt);
    }

    @Test
    void testPromptBuilderException() {
        DemandeSuggestionEmails prompt = new DemandeSuggestionEmails();
        when(svcllmService.promptBuilder(prompt)).thenThrow(new RuntimeException("Prompt error"));

        Chat response = controller.promptBuilder(prompt);

        assertNull(response);
    }
}
