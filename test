package fr.ca.cats.p1354.s3601.svcllm.service.impl;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import fr.ca.cats.p1354.s3601.svcllm.model.*;
import fr.ca.cats.p1354.s3601.svcllm.service.*;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Collections;

class ConsumerKafkaServiceImplTest {

    @Mock
    private ProducerKafkaService producerKafkaService;

    @Mock
    private LLMAccessService llmAccessService;

    @Mock
    private SvcllmService svcllmService;

    @Mock
    private AESUtilService aESUtilService;

    @Mock
    private KafkaConsumer<DemandeSuggestionKey, DemandeSuggestionValue> kafkaConsumer;

    @InjectMocks
    private ConsumerKafkaServiceImpl service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetIsActiveLocal() {
        service.setIsActiveLocal(true);
        assertTrue(service.getIsActiveLocal());

        service.setIsActiveLocal(false);
        assertFalse(service.getIsActiveLocal());
    }

    @Test
    void testInitCreatesKafkaConsumer() {
        service.init();
        assertNotNull(service.getKafkaConsumer());
    }

    @Test
    void testScheduleStopLocal() {
        service.setIsActiveLocal(true);
        service.scheduleStopLocal();
        assertFalse(service.getIsActiveLocal());
    }

    @Test
    void testStartCallsScheduleStart() {
        doNothing().when(service).scheduleStart(any());

        ResponseEntity<String> response = service.start(service);

        assertEquals(200, response.getStatusCodeValue());
        verify(service, times(1)).scheduleStart(any());
    }

    @Test
    void testStartHandlesException() {
        doThrow(new RuntimeException("Error starting"))
                .when(service).scheduleStart(any());

        ResponseEntity<String> response = service.start(service);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().contains("KO"));
    }

    @Test
    void testStartKafkaWithNoRecords() {
        when(kafkaConsumer.poll(any())).thenReturn(ConsumerRecords.empty());
        service.setIsActiveLocal(true);

        assertDoesNotThrow(() -> service.startKafka(service));
        verify(kafkaConsumer, atLeastOnce()).poll(any());
    }

    @Test
    void testStartKafkaHandlesException() {
        when(kafkaConsumer.poll(any())).thenThrow(new RuntimeException("Polling error"));

        service.setIsActiveLocal(true);

        assertDoesNotThrow(() -> service.startKafka(service));
    }
}
