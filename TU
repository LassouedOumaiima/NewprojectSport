package fr.ca.cats.p1354.s3601.svcllm.service.impl;

import fr.ca.cats.p1354.DemandeSuggestionKey;
import fr.ca.cats.p1354.DemandeSuggestionValue;
import fr.ca.cats.p1354.customer_info;
import fr.ca.cats.p1354.user_info;
import fr.ca.cats.p1354.s3601.svcllm.model.*;
import fr.ca.cats.p1354.s3601.svcllm.service.AESUtilService;
import fr.ca.cats.p1354.s3601.svcllm.service.ProducerKafkaService;
import fr.ca.cats.p1354.s3601.svcllm.service.SvcllmService;
import fr.ca.cats.p1354.s3601.svcllm.utils.KafkaPropertiesLoader;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.client.RestTemplate;

import java.time.Duration;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ConsumerKafkaServiceImplTest {

    @Mock
    private KafkaConsumer<DemandeSuggestionKey, DemandeSuggestionValue> kafkaConsumer;

    @Mock
    private ProducerKafkaService producerKafkaService;

    @Mock
    private SvcllmService svcllmService;

    @Mock
    private AESUtilService aesUtilService;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private ConsumerKafkaServiceImpl consumerKafkaService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        // Initialiser les comportements des mocks
        when(kafkaConsumer.poll(any(Duration.class))).thenReturn(new ConsumerRecords<>(Collections.emptyMap()));
    }

    @Test
    void testInitCreatesKafkaConsumer() {
        // Vérification de la méthode init()
        consumerKafkaService.init();
        assertNotNull(consumerKafkaService.getKafkaConsumer(), "KafkaConsumer should be initialized");
    }

    @Test
    void testStartKafkaProcessesRecords() {
        // Simulation d'un ConsumerRecord
        ConsumerRecords<DemandeSuggestionKey, DemandeSuggestionValue> consumerRecords = mock(ConsumerRecords.class);
        when(kafkaConsumer.poll(any(Duration.class))).thenReturn(consumerRecords);

        // Appel de la méthode
        consumerKafkaService.startKafka();

        // Vérification des comportements
        verify(kafkaConsumer, atLeastOnce()).poll(any(Duration.class));
        verify(kafkaConsumer, atLeastOnce()).commitSync();
    }

    @Test
    void testStartKafkaHandlesException() {
        // Simuler une exception pendant le traitement
        when(kafkaConsumer.poll(any(Duration.class))).thenThrow(new RuntimeException("Mocked Exception"));

        // Appel et vérification
        assertDoesNotThrow(() -> consumerKafkaService.startKafka(), "startKafka should handle exceptions gracefully");
        verify(kafkaConsumer, atLeastOnce()).commitSync();
    }

    @Test
    void testStartKafkaCoreHandlesValidSuggestion() {
        // Configuration de suggestionValue
        DemandeSuggestionValue suggestionValue = new DemandeSuggestionValue();
        suggestionValue.setMailId("12345");
        consumerKafkaService.suggestionValue = suggestionValue;

        // Simulation des dépendances
        when(svcllmService.decryptedDemandeSuggestionEmails(any(), any(), any())).thenReturn(new DemandeSuggestionEmail());
        when(svcllmService.promptBuilder(any())).thenReturn(new Chat());
        when(aesUtilService.encrypt(anyString())).thenReturn("encryptedString");
        when(restTemplate.postForObject(anyString(), any(), eq(String.class))).thenReturn("Success");

        // Appel de la méthode
        consumerKafkaService.startKafkaCore();

        // Vérifications
        verify(svcllmService).promptBuilder(any());
        verify(aesUtilService, atLeastOnce()).encrypt(anyString());
    }

    @Test
    void testStartReturnsCorrectResponse() {
        // Appel de la méthode start
        var response = consumerKafkaService.start();

        // Vérifications
        assertEquals(200, response.getStatusCodeValue());
        assertTrue(response.getBody().contains("ok"));
    }

    @Test
    void testStartHandlesException() {
        // Simulation d'une exception dans scheduleStart
        doThrow(new RuntimeException("Mocked Exception")).when(kafkaConsumer).poll(any(Duration.class));

        // Appel de la méthode start
        var response = consumerKafkaService.start();

        // Vérifications
        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().contains("KO"));
    }

    @Test
    void testScheduleStopLocalSetsInactiveState() {
        // Appel de la méthode
        consumerKafkaService.scheduleStopLocal();

        // Vérification
        assertFalse(consumerKafkaService.getIsActiveLocal(), "State should be inactive after scheduleStopLocal");
    }
}
